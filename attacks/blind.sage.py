
# This file was *autogenerated* from the file blind.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1024 = Integer(1024); _sage_const_0 = Integer(0); _sage_const_16 = Integer(16)
from sage.all import *
from random import random

def rsa(bits):
    # only prove correctness up to 1024 bits
    proof = (bits <= _sage_const_1024 )
    p = next_prime(ZZ.random_element(_sage_const_2 **(bits//_sage_const_2 +_sage_const_1 )), proof=proof)
    q = next_prime(ZZ.random_element(_sage_const_2 **(bits//_sage_const_2 +_sage_const_1 )), proof=proof)
    n = p*q
    phi_n = (p-_sage_const_1 )*(q-_sage_const_1 )
    while True:
        e = ZZ.random_element(_sage_const_1 ,phi_n)
        if gcd(e,phi_n) == _sage_const_1 :
            break
    d = lift(Mod(e,phi_n)**(-_sage_const_1 ))
    return e, d, n


def encrypt(msg,pubkey):
    coded = power_mod(int(msg),pubkey[_sage_const_0 ],pubkey[_sage_const_1 ])
    return coded

def decrypt(msg, privkey):
    coded = power_mod(int(msg),privkey[_sage_const_0 ],privkey[_sage_const_1 ])
    return coded

def signature(msg, privkey):
    return decrypt(msg,privkey)

def blindingfactor(N):
    r=ZZ.random_element(N)    
    while (gcd(r,N)!=_sage_const_1 ):
        r=ZZ.random_element(N)
    return r

def blind(msg,pubkey):  
    r=blindingfactor(pubkey[_sage_const_1 ])
    m=int(msg)
    blindmsg=(pow(r,*pubkey)*m)% pubkey[_sage_const_1 ]
    #print "Blinded Message "+str(blindmsg)
    return blindmsg,r

def unblind(msg,r,pubkey):
    bsm=int(msg)
    ubsm=(bsm*inverse_mod(r,pubkey[_sage_const_1 ]))% pubkey[_sage_const_1 ]
    #print "Unblinded Signed Message "+str(ubsm)
    return ubsm
    
e,d,n = rsa(_sage_const_1024 )

pubkey = (e,n)
privkey = (d,n)

msg = raw_input("Enter your message: ")
msg = int(msg.encode("hex"),_sage_const_16 )

print "Your encoded message is %d" % msg

#msg = 56789

print ""
signedtrue = signature(msg,privkey)
print "The Signature is %d" % signedtrue

print ""
blindedmsg,r = blind(msg,pubkey)
print "The Blinded Msg is %d" % blindedmsg

print ""
signedbmsg = signature(blindedmsg, privkey)
print "The Signed Blinded Message is %d" % signedbmsg

print ""
unblindsignedmsg = unblind(signedbmsg,r,pubkey)
print "The unblind signed message is %d" % unblindsignedmsg

temp = encrypt(unblindsignedmsg,pubkey)
print ""

m=hex(temp)

m=m.decode("hex")
print "The Msg is " + m

